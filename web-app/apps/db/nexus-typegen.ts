/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Company: { // root type
    audit_risk: number; // Int!
    board_risk: number; // Int!
    city: string; // String!
    compensation_risk: number; // Int!
    country: string; // String!
    full_time_employees: number; // Int!
    id: string; // String!
    long_business_summary: string; // String!
    name: string; // String!
    overall_risk: number; // Int!
    sector: string; // String!
    state: string; // String!
    website: string; // String!
  }
  HistoricalData: { // root type
    company: string; // String!
    date: string; // String!
    high: number; // Float!
    open: number; // Float!
    volume: string; // String!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Company: { // field return type
    audit_risk: number; // Int!
    board_risk: number; // Int!
    city: string; // String!
    compensation_risk: number; // Int!
    country: string; // String!
    full_time_employees: number; // Int!
    id: string; // String!
    long_business_summary: string; // String!
    name: string; // String!
    overall_risk: number; // Int!
    sector: string; // String!
    state: string; // String!
    website: string; // String!
  }
  HistoricalData: { // field return type
    company: string; // String!
    date: string; // String!
    high: number; // Float!
    open: number; // Float!
    volume: string; // String!
  }
  Mutation: { // field return type
    addCompany: boolean; // Boolean!
    addHistoricalData: boolean; // Boolean!
  }
  Query: { // field return type
    mongodb_companies: NexusGenRootTypes['Company'][]; // [Company!]!
    sql_companies: NexusGenRootTypes['Company'][]; // [Company!]!
    sql_historical_data: NexusGenRootTypes['HistoricalData'][]; // [HistoricalData!]!
  }
}

export interface NexusGenFieldTypeNames {
  Company: { // field return type name
    audit_risk: 'Int'
    board_risk: 'Int'
    city: 'String'
    compensation_risk: 'Int'
    country: 'String'
    full_time_employees: 'Int'
    id: 'String'
    long_business_summary: 'String'
    name: 'String'
    overall_risk: 'Int'
    sector: 'String'
    state: 'String'
    website: 'String'
  }
  HistoricalData: { // field return type name
    company: 'String'
    date: 'String'
    high: 'Float'
    open: 'Float'
    volume: 'String'
  }
  Mutation: { // field return type name
    addCompany: 'Boolean'
    addHistoricalData: 'Boolean'
  }
  Query: { // field return type name
    mongodb_companies: 'Company'
    sql_companies: 'Company'
    sql_historical_data: 'HistoricalData'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCompany: { // args
      ticker: string; // String!
    }
    addHistoricalData: { // args
      ticker: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}